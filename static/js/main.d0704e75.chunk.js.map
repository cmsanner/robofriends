{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","console","log","children","style","overflowY","border","height","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCC6BSC,EAzCC,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GAC1B,OACG,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,WACzD,6BACI,4BAAKL,GACL,2BAAIC,MCKLK,EAZE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACjB,OACE,kBAAC,WAAD,KACKA,EAAOC,KAAK,SAACC,EAAKC,GAEX,OAAS,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAIK,EAAOG,GAAGR,GAAIF,KAAMO,EAAOG,GAAGV,KAAMC,MAAOM,EAAOG,GAAGT,aCMjFW,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKV,UAAU,QACX,2BAAOA,UAAU,gCACbD,GAAG,cACHY,KAAK,SACLd,KAAK,cACLe,YAAY,gBACZC,SAAUH,MCCXI,G,MATA,SAACC,GAEZ,OADAC,QAAQC,IAAIF,EAAMG,UAEd,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEP,EAAMG,YCmBDK,E,kDArBX,WAAYR,GAAO,IAAD,8BACd,cAAMA,IACDS,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAOC,GACpBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,6DAGJG,KAAKb,MAAMG,a,GAjBCY,aCoDZC,E,kDA/CX,aAAc,IAAD,8BACT,gBAgBJC,eAAiB,SAACC,GAEd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAjBzC,EAAKZ,MAAQ,CACTpB,OAAQ,GACR8B,YAAa,IAJR,E,gEAQO,IAAD,OAEfG,MAAM,8CACDC,MAAK,SAAAC,GAAc,OAAOA,EAASC,UACnCF,MAAK,SAAAG,GAAU,EAAKZ,SAAS,CAACzB,OAAQqC,S,+BAUvC,MAE0Bb,KAAKJ,MAA5BpB,EAFH,EAEGA,OAAQ8B,EAFX,EAEWA,YACTQ,EAAiBtC,EAAOuC,QAAO,SAAAC,GAClC,OAAOA,EAAM/C,KAAKgD,oBAAoBC,SAASZ,EAAYW,wBAI/D,OAAyB,IAAlBzC,EAAO2C,OACT,2CAEI,yBAAK/C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAckB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU5B,OAAQsC,W,GAvC5BZ,a,MCClBkB,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SP2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLV,QAAQU,MAAMA,EAAMgC,a","file":"static/js/main.d0704e75.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n// styles from tachyons\r\n//tc: text center, bg: background, dib, br: border, pa: padding, ma: margins, grow animation, shadow: shadow\r\n\r\n// 2) destructure props to the values that were passed in    \r\n   const Card = ({name, email, id}) =>{\r\n     return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt='robots'></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n //1) destructure the props; props.name, props.email, props.id ==> now just use name, email, id\r\n// const Card = (props) =>{\r\n//     const {name, email, id} = props;\r\n//     return(\r\n//         <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n//             <img src={`https://robohash.org/${id}?size=200x200`} alt='robots'></img>\r\n//             <div>\r\n//                 <h2>{name}</h2>\r\n//                 <p>{email}</p>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n //Original\r\n//  const Card = (props) =>{\r\n//     return(\r\n//         <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n//             <img src={`https://robohash.org/${props.id}?size=200x200`} alt='robots'></img>\r\n//             <div>\r\n//                 <h2>{props.name}</h2>\r\n//                 <p>{props.email}</p>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n\r\n\r\nexport default Card;","import React, {Fragment} from 'react';\r\nimport Card from './Card';\r\n\r\n//2) because this is javascript, anything we put in the curly brackets is javaScript\r\n//   so we can move the cardArray inside the Fragment \r\nconst CardList = ({robots}) => {\r\n  return (\r\n    <Fragment>\r\n        {robots.map( (user,i) =>\r\n            {\r\n                return ( <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />)\r\n            }\r\n        )}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n\r\n//1) add a loop to get all the robots\r\n// when using a loop, need to provide a key for each item so you don't get the warning about \r\n// a unique key\r\n// const CardList = ({robots}) => {\r\n//     const cardArray = robots.map( (user,i) => {\r\n//         return ( <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />)\r\n//     })\r\n//     return (\r\n//       <Fragment>\r\n//           {cardArray}\r\n//       </Fragment>\r\n//     );\r\n//   }\r\n  \r\n\r\n\r\n//Original\r\n// const CardList = ({robots}) => {\r\n//     return (\r\n//       <Fragment>\r\n//           <Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />\r\n//           <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\r\n//           <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\r\n//           <Card id={robots[3].id} name={robots[3].name} email={robots[3].email}/>\r\n//       </Fragment>\r\n//     );\r\n//   }","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2 '>\r\n            <input className='pa3 b--green gb-lightest-blue' \r\n                id='robotSearch' \r\n                type='search' \r\n                name='robotSearch' \r\n                placeholder='Search Robots'\r\n                onChange={searchChange}\r\n            ></input>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    console.log(props.children); //Scroll wrapped CardList, which is the child - see App.js\r\n    return  (\r\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\r\n         {props.children}\r\n        </div>\r\n    )\r\n}\r\n        \r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        } \r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n         this.setState({hasError: true});\r\n      }\r\n\r\n    render() {\r\n        if (this.state.hasError){\r\n            return <h1>Ooooops. Something went wrong</h1>\r\n        }\r\n       \r\n        return this.props.children\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        //http://jsonplaceholder.typicode.com/users\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => { return response.json(); })\r\n            .then(users => {this.setState({robots: users}) })\r\n    }\r\n\r\n    //when you create your own functions you need to use the arrow functions\r\n    //onSearchchange (event)\r\n    onSearchChange = (event) => {\r\n        // console.log(event.target.value);\r\n        this.setState({searchfield: event.target.value});\r\n    }\r\n\r\n    render(){\r\n        //destructure this.state.robots, this.state.searchfield\r\n        const {robots, searchfield} = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n           return robot.name.toLocaleLowerCase().includes(searchfield.toLocaleLowerCase()) \r\n        })\r\n        //descructure robots.length === 0, where 0 stands for false, \r\n        //    so you can change this to true with !robots.length\r\n       return robots.length === 0?\r\n            <h1>Loading ...</h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f2'>RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        \r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport 'tachyons';\n\n\nReactDOM.render(<App /> , document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}